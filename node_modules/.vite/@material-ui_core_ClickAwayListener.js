import {
  useEventCallback
} from "./chunk-6VR2KVAD.js";
import {
  elementAcceptingRef_default
} from "./chunk-42EL5L23.js";
import {
  useForkRef
} from "./chunk-6IHPH5UZ.js";
import {
  __toModule,
  exactProp,
  require_prop_types
} from "./chunk-6ML6G6EC.js";
import {
  require_react_dom
} from "./chunk-C43TKA5M.js";
import {
  require_react
} from "./chunk-MED2QUMO.js";

// node_modules/@material-ui/core/esm/ClickAwayListener/ClickAwayListener.js
var React = __toModule(require_react());
var ReactDOM = __toModule(require_react_dom());
var import_prop_types = __toModule(require_prop_types());

// node_modules/@material-ui/core/esm/utils/ownerDocument.js
function ownerDocument(node) {
  return node && node.ownerDocument || document;
}

// node_modules/@material-ui/core/esm/ClickAwayListener/ClickAwayListener.js
function mapEventPropToEvent(eventProp) {
  return eventProp.substring(2).toLowerCase();
}
function clickedRootScrollbar(event) {
  return document.documentElement.clientWidth < event.clientX || document.documentElement.clientHeight < event.clientY;
}
function ClickAwayListener(props) {
  var children = props.children, _props$disableReactTr = props.disableReactTree, disableReactTree = _props$disableReactTr === void 0 ? false : _props$disableReactTr, _props$mouseEvent = props.mouseEvent, mouseEvent = _props$mouseEvent === void 0 ? "onClick" : _props$mouseEvent, onClickAway = props.onClickAway, _props$touchEvent = props.touchEvent, touchEvent = _props$touchEvent === void 0 ? "onTouchEnd" : _props$touchEvent;
  var movedRef = React.useRef(false);
  var nodeRef = React.useRef(null);
  var activatedRef = React.useRef(false);
  var syntheticEventRef = React.useRef(false);
  React.useEffect(function() {
    setTimeout(function() {
      activatedRef.current = true;
    }, 0);
    return function() {
      activatedRef.current = false;
    };
  }, []);
  var handleOwnRef = React.useCallback(function(instance) {
    nodeRef.current = ReactDOM.findDOMNode(instance);
  }, []);
  var handleRef = useForkRef(children.ref, handleOwnRef);
  var handleClickAway = useEventCallback(function(event) {
    var insideReactTree = syntheticEventRef.current;
    syntheticEventRef.current = false;
    if (!activatedRef.current || !nodeRef.current || clickedRootScrollbar(event)) {
      return;
    }
    if (movedRef.current) {
      movedRef.current = false;
      return;
    }
    var insideDOM;
    if (event.composedPath) {
      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
    } else {
      var doc = ownerDocument(nodeRef.current);
      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
    }
    if (!insideDOM && (disableReactTree || !insideReactTree)) {
      onClickAway(event);
    }
  });
  var createHandleSynthetic = function createHandleSynthetic2(handlerName) {
    return function(event) {
      syntheticEventRef.current = true;
      var childrenPropsHandler = children.props[handlerName];
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
  };
  var childrenProps = {
    ref: handleRef
  };
  if (touchEvent !== false) {
    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
  }
  React.useEffect(function() {
    if (touchEvent !== false) {
      var mappedTouchEvent = mapEventPropToEvent(touchEvent);
      var doc = ownerDocument(nodeRef.current);
      var handleTouchMove = function handleTouchMove2() {
        movedRef.current = true;
      };
      doc.addEventListener(mappedTouchEvent, handleClickAway);
      doc.addEventListener("touchmove", handleTouchMove);
      return function() {
        doc.removeEventListener(mappedTouchEvent, handleClickAway);
        doc.removeEventListener("touchmove", handleTouchMove);
      };
    }
    return void 0;
  }, [handleClickAway, touchEvent]);
  if (mouseEvent !== false) {
    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
  }
  React.useEffect(function() {
    if (mouseEvent !== false) {
      var mappedMouseEvent = mapEventPropToEvent(mouseEvent);
      var doc = ownerDocument(nodeRef.current);
      doc.addEventListener(mappedMouseEvent, handleClickAway);
      return function() {
        doc.removeEventListener(mappedMouseEvent, handleClickAway);
      };
    }
    return void 0;
  }, [handleClickAway, mouseEvent]);
  return React.createElement(React.Fragment, null, React.cloneElement(children, childrenProps));
}
true ? ClickAwayListener.propTypes = {
  children: elementAcceptingRef_default.isRequired,
  disableReactTree: import_prop_types.default.bool,
  mouseEvent: import_prop_types.default.oneOf(["onClick", "onMouseDown", "onMouseUp", false]),
  onClickAway: import_prop_types.default.func.isRequired,
  touchEvent: import_prop_types.default.oneOf(["onTouchEnd", "onTouchStart", false])
} : void 0;
if (true) {
  ClickAwayListener["propTypes"] = exactProp(ClickAwayListener.propTypes);
}
var ClickAwayListener_default = ClickAwayListener;

// dep:@material-ui_core_ClickAwayListener
var material_ui_core_ClickAwayListener_default = ClickAwayListener_default;
export {
  material_ui_core_ClickAwayListener_default as default
};
//# sourceMappingURL=@material-ui_core_ClickAwayListener.js.map
